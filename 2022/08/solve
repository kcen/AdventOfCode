#!/usr/bin/env ruby
require 'matrix'

input = ARGF.readlines.map(&:strip).map(&:chars)

Tree = Struct.new(:height, :visible, :distances) do
  def add_direction; distances.prepend(0); end
  def inc_direction; distances[0] += 1; end
  def view_score; distances.inject(&:*); end
end

grid = Matrix.rows(input).map { |e| Tree.new(e.to_i, false, []) }

def update(vec)
  vec.each_with_object({short: [], max: -1}) do |tree, opts|
    if tree.height > opts[:max]
      tree.visible = true
      opts[:max] = tree.height
    end
    tree.add_direction
    opts[:short].each(&:inc_direction)
    opts[:short].filter! { |t| t.height > tree.height }
    opts[:short].append(tree)
  end
end

[*grid.row_vectors, *grid.column_vectors].each do |row_col|
  [row_col,row_col.reverse_each].each do |direction|
    update(direction)
  end
end

puts "{\"part_one\":%d,\"part_two\":%d}" % [
  grid.count(&:visible),
  grid.map(&:view_score).max
]
