#!/usr/bin/env ruby
require "set"

input = ARGF.readlines.map do |line|
  line.match(/^(\w) (\d+\b)/)
  [$1, $2.to_i]
end

class Knot
  attr_accessor :x, :y, :tail, :obs, :visited

  def initialize
    @x, @y = 0, 0
    @visited = Set.new
  end

  def move!(direction, distance)
    distance.times do
      case direction
      when "U"; @y += 1
      when "D"; @y -= 1
      when "L"; @x -= 1
      when "R"; @x += 1
      end
      @tail.follow(self) if @tail
    end
  end

  def follow(parent)
    dist_x = parent.x - @x
    dist_y = parent.y - @y
    if dist_x ** 2 + dist_y ** 2 > 2
      @x += dist_x <=> 0
      @y += dist_y <=> 0
    end
    @visited.add [x, y].join(",") if @obs
    tail.follow(self) if @tail
  end
end

# Rope
def make_rope(length, obs = [])
  rope = length.times
    .map { |i| Knot.new }
    .each_cons(2) { |t, h| h.tail = t }
  tails = rope.values_at(*obs).each { |k| k.obs = true }
  [rope, rope[-1], *tails]
end

length = 10
rope, head, *tails = make_rope(length, [-2, -length])

input.each do |direction, distance|
  head.move!(direction, distance)
end

puts "{\"part_one\":%d,\"part_two\":%d}" % tails.map { |t| t.visited.count }
