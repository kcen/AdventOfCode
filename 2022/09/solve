#!/usr/bin/env ruby
require "set"

input = ARGF.readlines.map do |line|
  line.match(/^(\w) (\d+\b)/)
  [$1, $2.to_i]
end

@tail_visited = Set.new

@head = { x: 0, y: 0 }
@tail = { x: 0, y: 0 }

def sign(n); n <=> 0; end

def update_head(direction, distance)
  distance.times do
    case direction
    when "U"
      @head[:y] += 1
    when "D"
      @head[:y] -= 1
    when "L"
      @head[:x] -= 1
    when "R"
      @head[:x] += 1
    end
    update_tail
  end
end

def update_tail
  dist_x = @head[:x] - @tail[:x]
  dist_y = @head[:y] - @tail[:y]
  case [dist_x, dist_y].map(&:abs)
  when [2, 0]
    @tail[:x] += sign(dist_x)
  when [0, 2]
    @tail[:y] += sign(dist_y)
  when [2, 1], [1, 2]
    @tail[:x] += sign(dist_x)
    @tail[:y] += sign(dist_y)
  end
  @tail_visited.add @tail.values_at(:x, :y).join(",")
end

input.each do |direction, distance|
  update_head(direction, distance)
end

puts "{\"part_one\":%d,\"part_two\":%d}" % [
  @tail_visited.count,
  0,
]
